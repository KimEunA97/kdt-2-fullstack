const fileSystem = require('fs');
/**
 * 1. Node.js는 다른 프로그래밍 언어와 같이 파일시스템을 엑세스 할 수 있습니다.
 * 2. 엄격한 시선으로 프론트엔드에서의 javascript는 파일시스템을 엑세스 할 수 없습니다.
 * 일련의 요청 -> 승인 -> 조회 과정을 거쳐야 하는 절차및 로직시스템가 필요한데, 
 * 이는 익명의 누군가가 나의 컴퓨터를 마음대로 제어하게 할 수는 없기 때문입니다. 기본값은 '불허'입니다.
 * 3. 하지만 Node.js는 서버사이드 프로그래밍 언어이기 때문에, 기본적으로 파일시스템을 엑세스 할 수 있습니다. 
 * 4. 마음대로 제어할 수 있는 백엔드 프로그래밍의 대표적인 시작점 입니다.
 */

fileSystem.readdir('./', function(error, filelist) {
  // Node.js가 지원하는 fileSystem 모듈 내 readdir() 함수를 사용하여 현재 디렉토리의 파일목록을 가져옵니다.
  // 이것은 전통적인 javascript에서는 사용할 수 없는 기능입니다.
  // readdir() 함수는 2개의 인자를 받는 '규칙' 이 존재하고 이것은 DOC API 명세를 확인 할 필요가 있습니다.
  // 첫번째 인자는 디렉토리 경로를 받습니다.
  // 두번째 인자는 콜백함수를 받습니다.
  if (error) throw error; // 에러가 발생하면 에러를 던집니다. throw는 말그대로 던져주다라는 의미입니다.
  console.log(filelist); //  "./" 현재, 혹은 하위(자식)부분을 조회하게끔 경로를 설정했습니다.
  // console.log()의 기능에 따라 선택된 디렉토리의 데이터를 '문자열(string)'로, 최종적으로는 배열(array)로 리턴된 것을 확인 할 수 있습니다.
});